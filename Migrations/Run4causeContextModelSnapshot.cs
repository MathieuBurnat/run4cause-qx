// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using run4cause.Data;

#nullable disable

namespace run4cause.Migrations
{
    [DbContext(typeof(Run4causeContext))]
    partial class Run4causeContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EditionRun", b =>
                {
                    b.Property<int>("EditionsId")
                        .HasColumnType("integer")
                        .HasColumnName("editions_id");

                    b.Property<int>("RunsId")
                        .HasColumnType("integer")
                        .HasColumnName("runs_id");

                    b.HasKey("EditionsId", "RunsId")
                        .HasName("pk_edition_run");

                    b.HasIndex("RunsId")
                        .HasDatabaseName("ix_edition_run_runs_id");

                    b.ToTable("edition_run", (string)null);
                });

            modelBuilder.Entity("run4cause.Models.Edition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date");

                    b.Property<string>("Headline")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("headline");

                    b.Property<double?>("Latitude")
                        .HasColumnType("double precision")
                        .HasColumnName("latitude");

                    b.Property<string>("Location")
                        .HasColumnType("text")
                        .HasColumnName("location");

                    b.Property<double?>("Longitude")
                        .HasColumnType("double precision")
                        .HasColumnName("longitude");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_editions");

                    b.ToTable("editions", (string)null);
                });

            modelBuilder.Entity("run4cause.Models.Entry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("EditionId")
                        .HasColumnType("integer")
                        .HasColumnName("edition_id");

                    b.Property<DateTime>("Register")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("register");

                    b.Property<int>("RunId")
                        .HasColumnType("integer")
                        .HasColumnName("run_id");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_entries");

                    b.HasIndex("EditionId")
                        .HasDatabaseName("ix_entries_edition_id");

                    b.HasIndex("RunId")
                        .HasDatabaseName("ix_entries_run_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_entries_user_id");

                    b.ToTable("entries", (string)null);
                });

            modelBuilder.Entity("run4cause.Models.Run", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_runs");

                    b.ToTable("runs", (string)null);
                });

            modelBuilder.Entity("run4cause.Models.RunWaypoint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Instant")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("instant");

                    b.Property<int>("RunId")
                        .HasColumnType("integer")
                        .HasColumnName("run_id");

                    b.Property<int>("WaypointId")
                        .HasColumnType("integer")
                        .HasColumnName("waypoint_id");

                    b.HasKey("Id")
                        .HasName("pk_run_waypoints");

                    b.HasIndex("RunId")
                        .HasDatabaseName("ix_run_waypoints_run_id");

                    b.HasIndex("WaypointId")
                        .HasDatabaseName("ix_run_waypoints_waypoint_id");

                    b.ToTable("run_waypoints", (string)null);
                });

            modelBuilder.Entity("run4cause.Models.Sponsorship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<float>("AmountPerKilometer")
                        .HasColumnType("real")
                        .HasColumnName("amount_per_kilometer");

                    b.Property<int?>("PerformerId")
                        .HasColumnType("integer")
                        .HasColumnName("performer_id");

                    b.Property<int?>("SponsorId")
                        .HasColumnType("integer")
                        .HasColumnName("sponsor_id");

                    b.HasKey("Id")
                        .HasName("pk_sponsorships");

                    b.HasIndex("PerformerId")
                        .HasDatabaseName("ix_sponsorships_performer_id");

                    b.HasIndex("SponsorId")
                        .HasDatabaseName("ix_sponsorships_sponsor_id");

                    b.ToTable("sponsorships", (string)null);
                });

            modelBuilder.Entity("run4cause.Models.Tracking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Instant")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("instant");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<int>("WaypointId")
                        .HasColumnType("integer")
                        .HasColumnName("waypoint_id");

                    b.HasKey("Id")
                        .HasName("pk_trackings");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_trackings_user_id");

                    b.HasIndex("WaypointId")
                        .HasDatabaseName("ix_trackings_waypoint_id");

                    b.ToTable("trackings", (string)null);
                });

            modelBuilder.Entity("run4cause.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("character varying(320)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)")
                        .HasColumnName("phone_number");

                    b.Property<float>("TotalDistanceCovered")
                        .HasColumnType("real")
                        .HasColumnName("total_distance_covered");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("run4cause.Models.Waypoint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double?>("Latitude")
                        .HasColumnType("double precision")
                        .HasColumnName("latitude");

                    b.Property<double?>("Longitude")
                        .HasColumnType("double precision")
                        .HasColumnName("longitude");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_waypoints");

                    b.ToTable("waypoints", (string)null);
                });

            modelBuilder.Entity("EditionRun", b =>
                {
                    b.HasOne("run4cause.Models.Edition", null)
                        .WithMany()
                        .HasForeignKey("EditionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_edition_run_editions_editions_id");

                    b.HasOne("run4cause.Models.Run", null)
                        .WithMany()
                        .HasForeignKey("RunsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_edition_run_runs_runs_id");
                });

            modelBuilder.Entity("run4cause.Models.Entry", b =>
                {
                    b.HasOne("run4cause.Models.Edition", "Edition")
                        .WithMany("Entries")
                        .HasForeignKey("EditionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_entries_editions_edition_id");

                    b.HasOne("run4cause.Models.Run", "Run")
                        .WithMany("Entries")
                        .HasForeignKey("RunId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_entries_runs_run_id");

                    b.HasOne("run4cause.Models.User", "User")
                        .WithMany("Entries")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_entries_users_user_id");

                    b.Navigation("Edition");

                    b.Navigation("Run");

                    b.Navigation("User");
                });

            modelBuilder.Entity("run4cause.Models.RunWaypoint", b =>
                {
                    b.HasOne("run4cause.Models.Run", "Run")
                        .WithMany("RunWaypoints")
                        .HasForeignKey("RunId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_run_waypoints_runs_run_id");

                    b.HasOne("run4cause.Models.Waypoint", "Waypoint")
                        .WithMany("RunWaypoints")
                        .HasForeignKey("WaypointId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_run_waypoints_waypoints_waypoint_id");

                    b.Navigation("Run");

                    b.Navigation("Waypoint");
                });

            modelBuilder.Entity("run4cause.Models.Sponsorship", b =>
                {
                    b.HasOne("run4cause.Models.User", "Performer")
                        .WithMany()
                        .HasForeignKey("PerformerId")
                        .HasConstraintName("fk_sponsorships_users_performer_id");

                    b.HasOne("run4cause.Models.User", "Sponsor")
                        .WithMany()
                        .HasForeignKey("SponsorId")
                        .HasConstraintName("fk_sponsorships_users_sponsor_id");

                    b.Navigation("Performer");

                    b.Navigation("Sponsor");
                });

            modelBuilder.Entity("run4cause.Models.Tracking", b =>
                {
                    b.HasOne("run4cause.Models.User", "User")
                        .WithMany("Trackings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_trackings_users_user_id");

                    b.HasOne("run4cause.Models.Waypoint", "Waypoint")
                        .WithMany("Trackings")
                        .HasForeignKey("WaypointId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_trackings_waypoints_waypoint_id");

                    b.Navigation("User");

                    b.Navigation("Waypoint");
                });

            modelBuilder.Entity("run4cause.Models.Edition", b =>
                {
                    b.Navigation("Entries");
                });

            modelBuilder.Entity("run4cause.Models.Run", b =>
                {
                    b.Navigation("Entries");

                    b.Navigation("RunWaypoints");
                });

            modelBuilder.Entity("run4cause.Models.User", b =>
                {
                    b.Navigation("Entries");

                    b.Navigation("Trackings");
                });

            modelBuilder.Entity("run4cause.Models.Waypoint", b =>
                {
                    b.Navigation("RunWaypoints");

                    b.Navigation("Trackings");
                });
#pragma warning restore 612, 618
        }
    }
}
